// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: story_writer.proto
#ifndef GRPC_story_5fwriter_2eproto__INCLUDED
#define GRPC_story_5fwriter_2eproto__INCLUDED

#include "story_writer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace roleplay_bot {
namespace ai {

class StoryWriter final {
 public:
  static constexpr char const* service_full_name() {
    return "roleplay_bot.ai.StoryWriter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status InitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::roleplay_bot::ai::InitializeSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::InitializeSessionResponse>> AsyncInitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::InitializeSessionResponse>>(AsyncInitializeSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::InitializeSessionResponse>> PrepareAsyncInitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::InitializeSessionResponse>>(PrepareAsyncInitializeSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::roleplay_bot::ai::GetSessionConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetSessionConfigResponse>> AsyncGetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetSessionConfigResponse>>(AsyncGetSessionConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetSessionConfigResponse>> PrepareAsyncGetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetSessionConfigResponse>>(PrepareAsyncGetSessionConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::roleplay_bot::ai::WriteStoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::WriteStoryResponse>> AsyncWriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::WriteStoryResponse>>(AsyncWriteStoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::WriteStoryResponse>> PrepareAsyncWriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::WriteStoryResponse>>(PrepareAsyncWriteStoryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::roleplay_bot::ai::GetStoryHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetStoryHistoryResponse>> AsyncGetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetStoryHistoryResponse>>(AsyncGetStoryHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetStoryHistoryResponse>> PrepareAsyncGetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetStoryHistoryResponse>>(PrepareAsyncGetStoryHistoryRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::roleplay_bot::ai::DeleteSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::DeleteSessionResponse>> AsyncDeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::DeleteSessionResponse>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::DeleteSessionResponse>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::DeleteSessionResponse>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void InitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest* request, ::roleplay_bot::ai::InitializeSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest* request, ::roleplay_bot::ai::InitializeSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest* request, ::roleplay_bot::ai::GetSessionConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest* request, ::roleplay_bot::ai::GetSessionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest* request, ::roleplay_bot::ai::WriteStoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest* request, ::roleplay_bot::ai::WriteStoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest* request, ::roleplay_bot::ai::GetStoryHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest* request, ::roleplay_bot::ai::GetStoryHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest* request, ::roleplay_bot::ai::DeleteSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest* request, ::roleplay_bot::ai::DeleteSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::InitializeSessionResponse>* AsyncInitializeSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::InitializeSessionResponse>* PrepareAsyncInitializeSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetSessionConfigResponse>* AsyncGetSessionConfigRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetSessionConfigResponse>* PrepareAsyncGetSessionConfigRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::WriteStoryResponse>* AsyncWriteStoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::WriteStoryResponse>* PrepareAsyncWriteStoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetStoryHistoryResponse>* AsyncGetStoryHistoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::GetStoryHistoryResponse>* PrepareAsyncGetStoryHistoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::DeleteSessionResponse>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::roleplay_bot::ai::DeleteSessionResponse>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::roleplay_bot::ai::InitializeSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::InitializeSessionResponse>> AsyncInitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::InitializeSessionResponse>>(AsyncInitializeSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::InitializeSessionResponse>> PrepareAsyncInitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::InitializeSessionResponse>>(PrepareAsyncInitializeSessionRaw(context, request, cq));
    }
    ::grpc::Status GetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::roleplay_bot::ai::GetSessionConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetSessionConfigResponse>> AsyncGetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetSessionConfigResponse>>(AsyncGetSessionConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetSessionConfigResponse>> PrepareAsyncGetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetSessionConfigResponse>>(PrepareAsyncGetSessionConfigRaw(context, request, cq));
    }
    ::grpc::Status WriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::roleplay_bot::ai::WriteStoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::WriteStoryResponse>> AsyncWriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::WriteStoryResponse>>(AsyncWriteStoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::WriteStoryResponse>> PrepareAsyncWriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::WriteStoryResponse>>(PrepareAsyncWriteStoryRaw(context, request, cq));
    }
    ::grpc::Status GetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::roleplay_bot::ai::GetStoryHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetStoryHistoryResponse>> AsyncGetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetStoryHistoryResponse>>(AsyncGetStoryHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetStoryHistoryResponse>> PrepareAsyncGetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetStoryHistoryResponse>>(PrepareAsyncGetStoryHistoryRaw(context, request, cq));
    }
    ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::roleplay_bot::ai::DeleteSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::DeleteSessionResponse>> AsyncDeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::DeleteSessionResponse>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::DeleteSessionResponse>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::DeleteSessionResponse>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest* request, ::roleplay_bot::ai::InitializeSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void InitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest* request, ::roleplay_bot::ai::InitializeSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest* request, ::roleplay_bot::ai::GetSessionConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest* request, ::roleplay_bot::ai::GetSessionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest* request, ::roleplay_bot::ai::WriteStoryResponse* response, std::function<void(::grpc::Status)>) override;
      void WriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest* request, ::roleplay_bot::ai::WriteStoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest* request, ::roleplay_bot::ai::GetStoryHistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest* request, ::roleplay_bot::ai::GetStoryHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest* request, ::roleplay_bot::ai::DeleteSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest* request, ::roleplay_bot::ai::DeleteSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::InitializeSessionResponse>* AsyncInitializeSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::InitializeSessionResponse>* PrepareAsyncInitializeSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetSessionConfigResponse>* AsyncGetSessionConfigRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetSessionConfigResponse>* PrepareAsyncGetSessionConfigRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::WriteStoryResponse>* AsyncWriteStoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::WriteStoryResponse>* PrepareAsyncWriteStoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetStoryHistoryResponse>* AsyncGetStoryHistoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetStoryHistoryResponse>* PrepareAsyncGetStoryHistoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::DeleteSessionResponse>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::DeleteSessionResponse>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InitializeSession_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSessionConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteStory_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStoryHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSession_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status InitializeSession(::grpc::ServerContext* context, const ::roleplay_bot::ai::InitializeSessionRequest* request, ::roleplay_bot::ai::InitializeSessionResponse* response);
    virtual ::grpc::Status GetSessionConfig(::grpc::ServerContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest* request, ::roleplay_bot::ai::GetSessionConfigResponse* response);
    virtual ::grpc::Status WriteStory(::grpc::ServerContext* context, const ::roleplay_bot::ai::WriteStoryRequest* request, ::roleplay_bot::ai::WriteStoryResponse* response);
    virtual ::grpc::Status GetStoryHistory(::grpc::ServerContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest* request, ::roleplay_bot::ai::GetStoryHistoryResponse* response);
    virtual ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::roleplay_bot::ai::DeleteSessionRequest* request, ::roleplay_bot::ai::DeleteSessionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InitializeSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitializeSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InitializeSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitializeSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::InitializeSessionRequest* /*request*/, ::roleplay_bot::ai::InitializeSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitializeSession(::grpc::ServerContext* context, ::roleplay_bot::ai::InitializeSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::roleplay_bot::ai::InitializeSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSessionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSessionConfig() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSessionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionConfig(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetSessionConfigRequest* /*request*/, ::roleplay_bot::ai::GetSessionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSessionConfig(::grpc::ServerContext* context, ::roleplay_bot::ai::GetSessionConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::roleplay_bot::ai::GetSessionConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteStory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteStory() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_WriteStory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteStory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::WriteStoryRequest* /*request*/, ::roleplay_bot::ai::WriteStoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteStory(::grpc::ServerContext* context, ::roleplay_bot::ai::WriteStoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::roleplay_bot::ai::WriteStoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStoryHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStoryHistory() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetStoryHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoryHistory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetStoryHistoryRequest* /*request*/, ::roleplay_bot::ai::GetStoryHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStoryHistory(::grpc::ServerContext* context, ::roleplay_bot::ai::GetStoryHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::roleplay_bot::ai::GetStoryHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSession() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::DeleteSessionRequest* /*request*/, ::roleplay_bot::ai::DeleteSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::roleplay_bot::ai::DeleteSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::roleplay_bot::ai::DeleteSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InitializeSession<WithAsyncMethod_GetSessionConfig<WithAsyncMethod_WriteStory<WithAsyncMethod_GetStoryHistory<WithAsyncMethod_DeleteSession<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InitializeSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitializeSession() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::roleplay_bot::ai::InitializeSessionRequest, ::roleplay_bot::ai::InitializeSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::roleplay_bot::ai::InitializeSessionRequest* request, ::roleplay_bot::ai::InitializeSessionResponse* response) { return this->InitializeSession(context, request, response); }));}
    void SetMessageAllocatorFor_InitializeSession(
        ::grpc::MessageAllocator< ::roleplay_bot::ai::InitializeSessionRequest, ::roleplay_bot::ai::InitializeSessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::roleplay_bot::ai::InitializeSessionRequest, ::roleplay_bot::ai::InitializeSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitializeSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitializeSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::InitializeSessionRequest* /*request*/, ::roleplay_bot::ai::InitializeSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitializeSession(
      ::grpc::CallbackServerContext* /*context*/, const ::roleplay_bot::ai::InitializeSessionRequest* /*request*/, ::roleplay_bot::ai::InitializeSessionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSessionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSessionConfig() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::roleplay_bot::ai::GetSessionConfigRequest, ::roleplay_bot::ai::GetSessionConfigResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest* request, ::roleplay_bot::ai::GetSessionConfigResponse* response) { return this->GetSessionConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetSessionConfig(
        ::grpc::MessageAllocator< ::roleplay_bot::ai::GetSessionConfigRequest, ::roleplay_bot::ai::GetSessionConfigResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::roleplay_bot::ai::GetSessionConfigRequest, ::roleplay_bot::ai::GetSessionConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSessionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionConfig(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetSessionConfigRequest* /*request*/, ::roleplay_bot::ai::GetSessionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSessionConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::roleplay_bot::ai::GetSessionConfigRequest* /*request*/, ::roleplay_bot::ai::GetSessionConfigResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteStory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteStory() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::roleplay_bot::ai::WriteStoryRequest, ::roleplay_bot::ai::WriteStoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::roleplay_bot::ai::WriteStoryRequest* request, ::roleplay_bot::ai::WriteStoryResponse* response) { return this->WriteStory(context, request, response); }));}
    void SetMessageAllocatorFor_WriteStory(
        ::grpc::MessageAllocator< ::roleplay_bot::ai::WriteStoryRequest, ::roleplay_bot::ai::WriteStoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::roleplay_bot::ai::WriteStoryRequest, ::roleplay_bot::ai::WriteStoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteStory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteStory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::WriteStoryRequest* /*request*/, ::roleplay_bot::ai::WriteStoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteStory(
      ::grpc::CallbackServerContext* /*context*/, const ::roleplay_bot::ai::WriteStoryRequest* /*request*/, ::roleplay_bot::ai::WriteStoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStoryHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStoryHistory() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::roleplay_bot::ai::GetStoryHistoryRequest, ::roleplay_bot::ai::GetStoryHistoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest* request, ::roleplay_bot::ai::GetStoryHistoryResponse* response) { return this->GetStoryHistory(context, request, response); }));}
    void SetMessageAllocatorFor_GetStoryHistory(
        ::grpc::MessageAllocator< ::roleplay_bot::ai::GetStoryHistoryRequest, ::roleplay_bot::ai::GetStoryHistoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::roleplay_bot::ai::GetStoryHistoryRequest, ::roleplay_bot::ai::GetStoryHistoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStoryHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoryHistory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetStoryHistoryRequest* /*request*/, ::roleplay_bot::ai::GetStoryHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStoryHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::roleplay_bot::ai::GetStoryHistoryRequest* /*request*/, ::roleplay_bot::ai::GetStoryHistoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSession() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::roleplay_bot::ai::DeleteSessionRequest, ::roleplay_bot::ai::DeleteSessionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::roleplay_bot::ai::DeleteSessionRequest* request, ::roleplay_bot::ai::DeleteSessionResponse* response) { return this->DeleteSession(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSession(
        ::grpc::MessageAllocator< ::roleplay_bot::ai::DeleteSessionRequest, ::roleplay_bot::ai::DeleteSessionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::roleplay_bot::ai::DeleteSessionRequest, ::roleplay_bot::ai::DeleteSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::DeleteSessionRequest* /*request*/, ::roleplay_bot::ai::DeleteSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSession(
      ::grpc::CallbackServerContext* /*context*/, const ::roleplay_bot::ai::DeleteSessionRequest* /*request*/, ::roleplay_bot::ai::DeleteSessionResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InitializeSession<WithCallbackMethod_GetSessionConfig<WithCallbackMethod_WriteStory<WithCallbackMethod_GetStoryHistory<WithCallbackMethod_DeleteSession<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InitializeSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitializeSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InitializeSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitializeSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::InitializeSessionRequest* /*request*/, ::roleplay_bot::ai::InitializeSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSessionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSessionConfig() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSessionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionConfig(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetSessionConfigRequest* /*request*/, ::roleplay_bot::ai::GetSessionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteStory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteStory() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_WriteStory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteStory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::WriteStoryRequest* /*request*/, ::roleplay_bot::ai::WriteStoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStoryHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStoryHistory() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetStoryHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoryHistory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetStoryHistoryRequest* /*request*/, ::roleplay_bot::ai::GetStoryHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSession() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::DeleteSessionRequest* /*request*/, ::roleplay_bot::ai::DeleteSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitializeSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitializeSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InitializeSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitializeSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::InitializeSessionRequest* /*request*/, ::roleplay_bot::ai::InitializeSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitializeSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSessionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSessionConfig() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSessionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionConfig(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetSessionConfigRequest* /*request*/, ::roleplay_bot::ai::GetSessionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSessionConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteStory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteStory() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_WriteStory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteStory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::WriteStoryRequest* /*request*/, ::roleplay_bot::ai::WriteStoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteStory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStoryHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStoryHistory() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetStoryHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoryHistory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetStoryHistoryRequest* /*request*/, ::roleplay_bot::ai::GetStoryHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStoryHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSession() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::DeleteSessionRequest* /*request*/, ::roleplay_bot::ai::DeleteSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitializeSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitializeSession() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitializeSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitializeSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitializeSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::InitializeSessionRequest* /*request*/, ::roleplay_bot::ai::InitializeSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitializeSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSessionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSessionConfig() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSessionConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSessionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSessionConfig(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetSessionConfigRequest* /*request*/, ::roleplay_bot::ai::GetSessionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSessionConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteStory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteStory() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteStory(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteStory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteStory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::WriteStoryRequest* /*request*/, ::roleplay_bot::ai::WriteStoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteStory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStoryHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStoryHistory() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStoryHistory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStoryHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStoryHistory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetStoryHistoryRequest* /*request*/, ::roleplay_bot::ai::GetStoryHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStoryHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSession() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::DeleteSessionRequest* /*request*/, ::roleplay_bot::ai::DeleteSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitializeSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitializeSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::roleplay_bot::ai::InitializeSessionRequest, ::roleplay_bot::ai::InitializeSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::roleplay_bot::ai::InitializeSessionRequest, ::roleplay_bot::ai::InitializeSessionResponse>* streamer) {
                       return this->StreamedInitializeSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitializeSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitializeSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::InitializeSessionRequest* /*request*/, ::roleplay_bot::ai::InitializeSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitializeSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::roleplay_bot::ai::InitializeSessionRequest,::roleplay_bot::ai::InitializeSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSessionConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSessionConfig() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::roleplay_bot::ai::GetSessionConfigRequest, ::roleplay_bot::ai::GetSessionConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::roleplay_bot::ai::GetSessionConfigRequest, ::roleplay_bot::ai::GetSessionConfigResponse>* streamer) {
                       return this->StreamedGetSessionConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSessionConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSessionConfig(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetSessionConfigRequest* /*request*/, ::roleplay_bot::ai::GetSessionConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSessionConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::roleplay_bot::ai::GetSessionConfigRequest,::roleplay_bot::ai::GetSessionConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteStory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteStory() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::roleplay_bot::ai::WriteStoryRequest, ::roleplay_bot::ai::WriteStoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::roleplay_bot::ai::WriteStoryRequest, ::roleplay_bot::ai::WriteStoryResponse>* streamer) {
                       return this->StreamedWriteStory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteStory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteStory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::WriteStoryRequest* /*request*/, ::roleplay_bot::ai::WriteStoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteStory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::roleplay_bot::ai::WriteStoryRequest,::roleplay_bot::ai::WriteStoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStoryHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStoryHistory() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::roleplay_bot::ai::GetStoryHistoryRequest, ::roleplay_bot::ai::GetStoryHistoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::roleplay_bot::ai::GetStoryHistoryRequest, ::roleplay_bot::ai::GetStoryHistoryResponse>* streamer) {
                       return this->StreamedGetStoryHistory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStoryHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStoryHistory(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::GetStoryHistoryRequest* /*request*/, ::roleplay_bot::ai::GetStoryHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStoryHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::roleplay_bot::ai::GetStoryHistoryRequest,::roleplay_bot::ai::GetStoryHistoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSession() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::roleplay_bot::ai::DeleteSessionRequest, ::roleplay_bot::ai::DeleteSessionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::roleplay_bot::ai::DeleteSessionRequest, ::roleplay_bot::ai::DeleteSessionResponse>* streamer) {
                       return this->StreamedDeleteSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::roleplay_bot::ai::DeleteSessionRequest* /*request*/, ::roleplay_bot::ai::DeleteSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::roleplay_bot::ai::DeleteSessionRequest,::roleplay_bot::ai::DeleteSessionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InitializeSession<WithStreamedUnaryMethod_GetSessionConfig<WithStreamedUnaryMethod_WriteStory<WithStreamedUnaryMethod_GetStoryHistory<WithStreamedUnaryMethod_DeleteSession<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InitializeSession<WithStreamedUnaryMethod_GetSessionConfig<WithStreamedUnaryMethod_WriteStory<WithStreamedUnaryMethod_GetStoryHistory<WithStreamedUnaryMethod_DeleteSession<Service > > > > > StreamedService;
};

}  // namespace ai
}  // namespace roleplay_bot


#endif  // GRPC_story_5fwriter_2eproto__INCLUDED
