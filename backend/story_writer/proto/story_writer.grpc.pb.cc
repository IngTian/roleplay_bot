// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: story_writer.proto

#include "story_writer.pb.h"
#include "story_writer.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace roleplay_bot {
namespace ai {

static const char* StoryWriter_method_names[] = {
  "/roleplay_bot.ai.StoryWriter/InitializeSession",
  "/roleplay_bot.ai.StoryWriter/GetSessionConfig",
  "/roleplay_bot.ai.StoryWriter/WriteStory",
  "/roleplay_bot.ai.StoryWriter/GetStoryHistory",
  "/roleplay_bot.ai.StoryWriter/DeleteSession",
};

std::unique_ptr< StoryWriter::Stub> StoryWriter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StoryWriter::Stub> stub(new StoryWriter::Stub(channel, options));
  return stub;
}

StoryWriter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InitializeSession_(StoryWriter_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSessionConfig_(StoryWriter_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteStory_(StoryWriter_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStoryHistory_(StoryWriter_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSession_(StoryWriter_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StoryWriter::Stub::InitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::roleplay_bot::ai::InitializeSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::roleplay_bot::ai::InitializeSessionRequest, ::roleplay_bot::ai::InitializeSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitializeSession_, context, request, response);
}

void StoryWriter::Stub::async::InitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest* request, ::roleplay_bot::ai::InitializeSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::roleplay_bot::ai::InitializeSessionRequest, ::roleplay_bot::ai::InitializeSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitializeSession_, context, request, response, std::move(f));
}

void StoryWriter::Stub::async::InitializeSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest* request, ::roleplay_bot::ai::InitializeSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitializeSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::InitializeSessionResponse>* StoryWriter::Stub::PrepareAsyncInitializeSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::roleplay_bot::ai::InitializeSessionResponse, ::roleplay_bot::ai::InitializeSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitializeSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::InitializeSessionResponse>* StoryWriter::Stub::AsyncInitializeSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::InitializeSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitializeSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StoryWriter::Stub::GetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::roleplay_bot::ai::GetSessionConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::roleplay_bot::ai::GetSessionConfigRequest, ::roleplay_bot::ai::GetSessionConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSessionConfig_, context, request, response);
}

void StoryWriter::Stub::async::GetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest* request, ::roleplay_bot::ai::GetSessionConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::roleplay_bot::ai::GetSessionConfigRequest, ::roleplay_bot::ai::GetSessionConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessionConfig_, context, request, response, std::move(f));
}

void StoryWriter::Stub::async::GetSessionConfig(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest* request, ::roleplay_bot::ai::GetSessionConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessionConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetSessionConfigResponse>* StoryWriter::Stub::PrepareAsyncGetSessionConfigRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::roleplay_bot::ai::GetSessionConfigResponse, ::roleplay_bot::ai::GetSessionConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSessionConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetSessionConfigResponse>* StoryWriter::Stub::AsyncGetSessionConfigRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSessionConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StoryWriter::Stub::WriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::roleplay_bot::ai::WriteStoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::roleplay_bot::ai::WriteStoryRequest, ::roleplay_bot::ai::WriteStoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteStory_, context, request, response);
}

void StoryWriter::Stub::async::WriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest* request, ::roleplay_bot::ai::WriteStoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::roleplay_bot::ai::WriteStoryRequest, ::roleplay_bot::ai::WriteStoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteStory_, context, request, response, std::move(f));
}

void StoryWriter::Stub::async::WriteStory(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest* request, ::roleplay_bot::ai::WriteStoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteStory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::WriteStoryResponse>* StoryWriter::Stub::PrepareAsyncWriteStoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::roleplay_bot::ai::WriteStoryResponse, ::roleplay_bot::ai::WriteStoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteStory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::WriteStoryResponse>* StoryWriter::Stub::AsyncWriteStoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::WriteStoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteStoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StoryWriter::Stub::GetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::roleplay_bot::ai::GetStoryHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::roleplay_bot::ai::GetStoryHistoryRequest, ::roleplay_bot::ai::GetStoryHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStoryHistory_, context, request, response);
}

void StoryWriter::Stub::async::GetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest* request, ::roleplay_bot::ai::GetStoryHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::roleplay_bot::ai::GetStoryHistoryRequest, ::roleplay_bot::ai::GetStoryHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStoryHistory_, context, request, response, std::move(f));
}

void StoryWriter::Stub::async::GetStoryHistory(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest* request, ::roleplay_bot::ai::GetStoryHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStoryHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetStoryHistoryResponse>* StoryWriter::Stub::PrepareAsyncGetStoryHistoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::roleplay_bot::ai::GetStoryHistoryResponse, ::roleplay_bot::ai::GetStoryHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStoryHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::GetStoryHistoryResponse>* StoryWriter::Stub::AsyncGetStoryHistoryRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStoryHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StoryWriter::Stub::DeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::roleplay_bot::ai::DeleteSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::roleplay_bot::ai::DeleteSessionRequest, ::roleplay_bot::ai::DeleteSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSession_, context, request, response);
}

void StoryWriter::Stub::async::DeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest* request, ::roleplay_bot::ai::DeleteSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::roleplay_bot::ai::DeleteSessionRequest, ::roleplay_bot::ai::DeleteSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSession_, context, request, response, std::move(f));
}

void StoryWriter::Stub::async::DeleteSession(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest* request, ::roleplay_bot::ai::DeleteSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::DeleteSessionResponse>* StoryWriter::Stub::PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::roleplay_bot::ai::DeleteSessionResponse, ::roleplay_bot::ai::DeleteSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::roleplay_bot::ai::DeleteSessionResponse>* StoryWriter::Stub::AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::roleplay_bot::ai::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

StoryWriter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StoryWriter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StoryWriter::Service, ::roleplay_bot::ai::InitializeSessionRequest, ::roleplay_bot::ai::InitializeSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StoryWriter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::roleplay_bot::ai::InitializeSessionRequest* req,
             ::roleplay_bot::ai::InitializeSessionResponse* resp) {
               return service->InitializeSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StoryWriter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StoryWriter::Service, ::roleplay_bot::ai::GetSessionConfigRequest, ::roleplay_bot::ai::GetSessionConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StoryWriter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::roleplay_bot::ai::GetSessionConfigRequest* req,
             ::roleplay_bot::ai::GetSessionConfigResponse* resp) {
               return service->GetSessionConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StoryWriter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StoryWriter::Service, ::roleplay_bot::ai::WriteStoryRequest, ::roleplay_bot::ai::WriteStoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StoryWriter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::roleplay_bot::ai::WriteStoryRequest* req,
             ::roleplay_bot::ai::WriteStoryResponse* resp) {
               return service->WriteStory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StoryWriter_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StoryWriter::Service, ::roleplay_bot::ai::GetStoryHistoryRequest, ::roleplay_bot::ai::GetStoryHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StoryWriter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::roleplay_bot::ai::GetStoryHistoryRequest* req,
             ::roleplay_bot::ai::GetStoryHistoryResponse* resp) {
               return service->GetStoryHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StoryWriter_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StoryWriter::Service, ::roleplay_bot::ai::DeleteSessionRequest, ::roleplay_bot::ai::DeleteSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StoryWriter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::roleplay_bot::ai::DeleteSessionRequest* req,
             ::roleplay_bot::ai::DeleteSessionResponse* resp) {
               return service->DeleteSession(ctx, req, resp);
             }, this)));
}

StoryWriter::Service::~Service() {
}

::grpc::Status StoryWriter::Service::InitializeSession(::grpc::ServerContext* context, const ::roleplay_bot::ai::InitializeSessionRequest* request, ::roleplay_bot::ai::InitializeSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StoryWriter::Service::GetSessionConfig(::grpc::ServerContext* context, const ::roleplay_bot::ai::GetSessionConfigRequest* request, ::roleplay_bot::ai::GetSessionConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StoryWriter::Service::WriteStory(::grpc::ServerContext* context, const ::roleplay_bot::ai::WriteStoryRequest* request, ::roleplay_bot::ai::WriteStoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StoryWriter::Service::GetStoryHistory(::grpc::ServerContext* context, const ::roleplay_bot::ai::GetStoryHistoryRequest* request, ::roleplay_bot::ai::GetStoryHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StoryWriter::Service::DeleteSession(::grpc::ServerContext* context, const ::roleplay_bot::ai::DeleteSessionRequest* request, ::roleplay_bot::ai::DeleteSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace roleplay_bot
}  // namespace ai

