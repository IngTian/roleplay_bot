// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: story_writer.proto
// Protobuf C++ Version: 5.29.2

#ifndef story_5fwriter_2eproto_2epb_2eh
#define story_5fwriter_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_story_5fwriter_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_story_5fwriter_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_story_5fwriter_2eproto;
namespace roleplay_bot {
namespace ai {
class DeleteSessionRequest;
struct DeleteSessionRequestDefaultTypeInternal;
extern DeleteSessionRequestDefaultTypeInternal _DeleteSessionRequest_default_instance_;
class DeleteSessionResponse;
struct DeleteSessionResponseDefaultTypeInternal;
extern DeleteSessionResponseDefaultTypeInternal _DeleteSessionResponse_default_instance_;
class GetSessionConfigRequest;
struct GetSessionConfigRequestDefaultTypeInternal;
extern GetSessionConfigRequestDefaultTypeInternal _GetSessionConfigRequest_default_instance_;
class GetSessionConfigResponse;
struct GetSessionConfigResponseDefaultTypeInternal;
extern GetSessionConfigResponseDefaultTypeInternal _GetSessionConfigResponse_default_instance_;
class GetStoryHistoryRequest;
struct GetStoryHistoryRequestDefaultTypeInternal;
extern GetStoryHistoryRequestDefaultTypeInternal _GetStoryHistoryRequest_default_instance_;
class GetStoryHistoryResponse;
struct GetStoryHistoryResponseDefaultTypeInternal;
extern GetStoryHistoryResponseDefaultTypeInternal _GetStoryHistoryResponse_default_instance_;
class InitializeSessionRequest;
struct InitializeSessionRequestDefaultTypeInternal;
extern InitializeSessionRequestDefaultTypeInternal _InitializeSessionRequest_default_instance_;
class InitializeSessionResponse;
struct InitializeSessionResponseDefaultTypeInternal;
extern InitializeSessionResponseDefaultTypeInternal _InitializeSessionResponse_default_instance_;
class StoryDetails;
struct StoryDetailsDefaultTypeInternal;
extern StoryDetailsDefaultTypeInternal _StoryDetails_default_instance_;
class WriteStoryRequest;
struct WriteStoryRequestDefaultTypeInternal;
extern WriteStoryRequestDefaultTypeInternal _WriteStoryRequest_default_instance_;
class WriteStoryResponse;
struct WriteStoryResponseDefaultTypeInternal;
extern WriteStoryResponseDefaultTypeInternal _WriteStoryResponse_default_instance_;
}  // namespace ai
}  // namespace roleplay_bot
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace roleplay_bot {
namespace ai {
enum Model : int {
  Gemini_1_5_Pro = 0,
  Model_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Model_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Model_IsValid(int value);
extern const uint32_t Model_internal_data_[];
constexpr Model Model_MIN = static_cast<Model>(0);
constexpr Model Model_MAX = static_cast<Model>(0);
constexpr int Model_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
Model_descriptor();
template <typename T>
const std::string& Model_Name(T value) {
  static_assert(std::is_same<T, Model>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Model_Name().");
  return Model_Name(static_cast<Model>(value));
}
template <>
inline const std::string& Model_Name(Model value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Model_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool Model_Parse(absl::string_view name, Model* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Model>(
      Model_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WriteStoryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.WriteStoryResponse) */ {
 public:
  inline WriteStoryResponse() : WriteStoryResponse(nullptr) {}
  ~WriteStoryResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WriteStoryResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WriteStoryResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WriteStoryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline WriteStoryResponse(const WriteStoryResponse& from) : WriteStoryResponse(nullptr, from) {}
  inline WriteStoryResponse(WriteStoryResponse&& from) noexcept
      : WriteStoryResponse(nullptr, std::move(from)) {}
  inline WriteStoryResponse& operator=(const WriteStoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteStoryResponse& operator=(WriteStoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteStoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteStoryResponse* internal_default_instance() {
    return reinterpret_cast<const WriteStoryResponse*>(
        &_WriteStoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(WriteStoryResponse& a, WriteStoryResponse& b) { a.Swap(&b); }
  inline void Swap(WriteStoryResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteStoryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteStoryResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WriteStoryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WriteStoryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WriteStoryResponse& from) { WriteStoryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WriteStoryResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.WriteStoryResponse"; }

 protected:
  explicit WriteStoryResponse(::google::protobuf::Arena* arena);
  WriteStoryResponse(::google::protobuf::Arena* arena, const WriteStoryResponse& from);
  WriteStoryResponse(::google::protobuf::Arena* arena, WriteStoryResponse&& from) noexcept
      : WriteStoryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStoryFieldNumber = 1,
  };
  // string story = 1;
  void clear_story() ;
  const std::string& story() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_story(Arg_&& arg, Args_... args);
  std::string* mutable_story();
  PROTOBUF_NODISCARD std::string* release_story();
  void set_allocated_story(std::string* value);

  private:
  const std::string& _internal_story() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_story(
      const std::string& value);
  std::string* _internal_mutable_story();

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.WriteStoryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WriteStoryResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr story_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class WriteStoryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.WriteStoryRequest) */ {
 public:
  inline WriteStoryRequest() : WriteStoryRequest(nullptr) {}
  ~WriteStoryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WriteStoryRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WriteStoryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WriteStoryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline WriteStoryRequest(const WriteStoryRequest& from) : WriteStoryRequest(nullptr, from) {}
  inline WriteStoryRequest(WriteStoryRequest&& from) noexcept
      : WriteStoryRequest(nullptr, std::move(from)) {}
  inline WriteStoryRequest& operator=(const WriteStoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteStoryRequest& operator=(WriteStoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteStoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteStoryRequest* internal_default_instance() {
    return reinterpret_cast<const WriteStoryRequest*>(
        &_WriteStoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(WriteStoryRequest& a, WriteStoryRequest& b) { a.Swap(&b); }
  inline void Swap(WriteStoryRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteStoryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteStoryRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WriteStoryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WriteStoryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WriteStoryRequest& from) { WriteStoryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WriteStoryRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.WriteStoryRequest"; }

 protected:
  explicit WriteStoryRequest(::google::protobuf::Arena* arena);
  WriteStoryRequest(::google::protobuf::Arena* arena, const WriteStoryRequest& from);
  WriteStoryRequest(::google::protobuf::Arena* arena, WriteStoryRequest&& from) noexcept
      : WriteStoryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
    kPromptFieldNumber = 2,
  };
  // string session_id = 1;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // string prompt = 2;
  void clear_prompt() ;
  const std::string& prompt() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prompt(Arg_&& arg, Args_... args);
  std::string* mutable_prompt();
  PROTOBUF_NODISCARD std::string* release_prompt();
  void set_allocated_prompt(std::string* value);

  private:
  const std::string& _internal_prompt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prompt(
      const std::string& value);
  std::string* _internal_mutable_prompt();

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.WriteStoryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WriteStoryRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::ArenaStringPtr prompt_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class StoryDetails final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.StoryDetails) */ {
 public:
  inline StoryDetails() : StoryDetails(nullptr) {}
  ~StoryDetails() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StoryDetails* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StoryDetails));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StoryDetails(
      ::google::protobuf::internal::ConstantInitialized);

  inline StoryDetails(const StoryDetails& from) : StoryDetails(nullptr, from) {}
  inline StoryDetails(StoryDetails&& from) noexcept
      : StoryDetails(nullptr, std::move(from)) {}
  inline StoryDetails& operator=(const StoryDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoryDetails& operator=(StoryDetails&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoryDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoryDetails* internal_default_instance() {
    return reinterpret_cast<const StoryDetails*>(
        &_StoryDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(StoryDetails& a, StoryDetails& b) { a.Swap(&b); }
  inline void Swap(StoryDetails* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoryDetails* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoryDetails* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StoryDetails>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StoryDetails& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StoryDetails& from) { StoryDetails::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StoryDetails* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.StoryDetails"; }

 protected:
  explicit StoryDetails(::google::protobuf::Arena* arena);
  StoryDetails(::google::protobuf::Arena* arena, const StoryDetails& from);
  StoryDetails(::google::protobuf::Arena* arena, StoryDetails&& from) noexcept
      : StoryDetails(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPromptFieldNumber = 1,
    kStoryFieldNumber = 2,
    kCreatedTimeFieldNumber = 3,
  };
  // string prompt = 1;
  void clear_prompt() ;
  const std::string& prompt() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prompt(Arg_&& arg, Args_... args);
  std::string* mutable_prompt();
  PROTOBUF_NODISCARD std::string* release_prompt();
  void set_allocated_prompt(std::string* value);

  private:
  const std::string& _internal_prompt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prompt(
      const std::string& value);
  std::string* _internal_mutable_prompt();

  public:
  // string story = 2;
  void clear_story() ;
  const std::string& story() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_story(Arg_&& arg, Args_... args);
  std::string* mutable_story();
  PROTOBUF_NODISCARD std::string* release_story();
  void set_allocated_story(std::string* value);

  private:
  const std::string& _internal_story() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_story(
      const std::string& value);
  std::string* _internal_mutable_story();

  public:
  // uint64 created_time = 3;
  void clear_created_time() ;
  ::uint64_t created_time() const;
  void set_created_time(::uint64_t value);

  private:
  ::uint64_t _internal_created_time() const;
  void _internal_set_created_time(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.StoryDetails)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StoryDetails& from_msg);
    ::google::protobuf::internal::ArenaStringPtr prompt_;
    ::google::protobuf::internal::ArenaStringPtr story_;
    ::uint64_t created_time_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class InitializeSessionResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.InitializeSessionResponse) */ {
 public:
  inline InitializeSessionResponse() : InitializeSessionResponse(nullptr) {}
  ~InitializeSessionResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InitializeSessionResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InitializeSessionResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InitializeSessionResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline InitializeSessionResponse(const InitializeSessionResponse& from) : InitializeSessionResponse(nullptr, from) {}
  inline InitializeSessionResponse(InitializeSessionResponse&& from) noexcept
      : InitializeSessionResponse(nullptr, std::move(from)) {}
  inline InitializeSessionResponse& operator=(const InitializeSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeSessionResponse& operator=(InitializeSessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeSessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeSessionResponse* internal_default_instance() {
    return reinterpret_cast<const InitializeSessionResponse*>(
        &_InitializeSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(InitializeSessionResponse& a, InitializeSessionResponse& b) { a.Swap(&b); }
  inline void Swap(InitializeSessionResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeSessionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeSessionResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InitializeSessionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InitializeSessionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InitializeSessionResponse& from) { InitializeSessionResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InitializeSessionResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.InitializeSessionResponse"; }

 protected:
  explicit InitializeSessionResponse(::google::protobuf::Arena* arena);
  InitializeSessionResponse(::google::protobuf::Arena* arena, const InitializeSessionResponse& from);
  InitializeSessionResponse(::google::protobuf::Arena* arena, InitializeSessionResponse&& from) noexcept
      : InitializeSessionResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.InitializeSessionResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InitializeSessionResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class InitializeSessionRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.InitializeSessionRequest) */ {
 public:
  inline InitializeSessionRequest() : InitializeSessionRequest(nullptr) {}
  ~InitializeSessionRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InitializeSessionRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InitializeSessionRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InitializeSessionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline InitializeSessionRequest(const InitializeSessionRequest& from) : InitializeSessionRequest(nullptr, from) {}
  inline InitializeSessionRequest(InitializeSessionRequest&& from) noexcept
      : InitializeSessionRequest(nullptr, std::move(from)) {}
  inline InitializeSessionRequest& operator=(const InitializeSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeSessionRequest& operator=(InitializeSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitializeSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitializeSessionRequest* internal_default_instance() {
    return reinterpret_cast<const InitializeSessionRequest*>(
        &_InitializeSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(InitializeSessionRequest& a, InitializeSessionRequest& b) { a.Swap(&b); }
  inline void Swap(InitializeSessionRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeSessionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitializeSessionRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InitializeSessionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InitializeSessionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InitializeSessionRequest& from) { InitializeSessionRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InitializeSessionRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.InitializeSessionRequest"; }

 protected:
  explicit InitializeSessionRequest(::google::protobuf::Arena* arena);
  InitializeSessionRequest(::google::protobuf::Arena* arena, const InitializeSessionRequest& from);
  InitializeSessionRequest(::google::protobuf::Arena* arena, InitializeSessionRequest&& from) noexcept
      : InitializeSessionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserNameFieldNumber = 2,
    kCharacterNameFieldNumber = 3,
    kSystemConfigFieldNumber = 4,
    kModelFieldNumber = 1,
    kTopKFieldNumber = 7,
    kTemperatureFieldNumber = 5,
    kTopPFieldNumber = 6,
    kMaxLengthFieldNumber = 8,
  };
  // string user_name = 2;
  void clear_user_name() ;
  const std::string& user_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* value);

  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
      const std::string& value);
  std::string* _internal_mutable_user_name();

  public:
  // string character_name = 3;
  void clear_character_name() ;
  const std::string& character_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character_name(Arg_&& arg, Args_... args);
  std::string* mutable_character_name();
  PROTOBUF_NODISCARD std::string* release_character_name();
  void set_allocated_character_name(std::string* value);

  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(
      const std::string& value);
  std::string* _internal_mutable_character_name();

  public:
  // string system_config = 4;
  void clear_system_config() ;
  const std::string& system_config() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_system_config(Arg_&& arg, Args_... args);
  std::string* mutable_system_config();
  PROTOBUF_NODISCARD std::string* release_system_config();
  void set_allocated_system_config(std::string* value);

  private:
  const std::string& _internal_system_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_config(
      const std::string& value);
  std::string* _internal_mutable_system_config();

  public:
  // .roleplay_bot.ai.Model model = 1;
  void clear_model() ;
  ::roleplay_bot::ai::Model model() const;
  void set_model(::roleplay_bot::ai::Model value);

  private:
  ::roleplay_bot::ai::Model _internal_model() const;
  void _internal_set_model(::roleplay_bot::ai::Model value);

  public:
  // uint32 top_k = 7;
  void clear_top_k() ;
  ::uint32_t top_k() const;
  void set_top_k(::uint32_t value);

  private:
  ::uint32_t _internal_top_k() const;
  void _internal_set_top_k(::uint32_t value);

  public:
  // double temperature = 5;
  void clear_temperature() ;
  double temperature() const;
  void set_temperature(double value);

  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);

  public:
  // double top_p = 6;
  void clear_top_p() ;
  double top_p() const;
  void set_top_p(double value);

  private:
  double _internal_top_p() const;
  void _internal_set_top_p(double value);

  public:
  // uint32 max_length = 8;
  void clear_max_length() ;
  ::uint32_t max_length() const;
  void set_max_length(::uint32_t value);

  private:
  ::uint32_t _internal_max_length() const;
  void _internal_set_max_length(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.InitializeSessionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      93, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InitializeSessionRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_name_;
    ::google::protobuf::internal::ArenaStringPtr character_name_;
    ::google::protobuf::internal::ArenaStringPtr system_config_;
    int model_;
    ::uint32_t top_k_;
    double temperature_;
    double top_p_;
    ::uint32_t max_length_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class GetStoryHistoryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.GetStoryHistoryRequest) */ {
 public:
  inline GetStoryHistoryRequest() : GetStoryHistoryRequest(nullptr) {}
  ~GetStoryHistoryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetStoryHistoryRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetStoryHistoryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetStoryHistoryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetStoryHistoryRequest(const GetStoryHistoryRequest& from) : GetStoryHistoryRequest(nullptr, from) {}
  inline GetStoryHistoryRequest(GetStoryHistoryRequest&& from) noexcept
      : GetStoryHistoryRequest(nullptr, std::move(from)) {}
  inline GetStoryHistoryRequest& operator=(const GetStoryHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStoryHistoryRequest& operator=(GetStoryHistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStoryHistoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStoryHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const GetStoryHistoryRequest*>(
        &_GetStoryHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GetStoryHistoryRequest& a, GetStoryHistoryRequest& b) { a.Swap(&b); }
  inline void Swap(GetStoryHistoryRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStoryHistoryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStoryHistoryRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetStoryHistoryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetStoryHistoryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetStoryHistoryRequest& from) { GetStoryHistoryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetStoryHistoryRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.GetStoryHistoryRequest"; }

 protected:
  explicit GetStoryHistoryRequest(::google::protobuf::Arena* arena);
  GetStoryHistoryRequest(::google::protobuf::Arena* arena, const GetStoryHistoryRequest& from);
  GetStoryHistoryRequest(::google::protobuf::Arena* arena, GetStoryHistoryRequest&& from) noexcept
      : GetStoryHistoryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.GetStoryHistoryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetStoryHistoryRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class GetSessionConfigResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.GetSessionConfigResponse) */ {
 public:
  inline GetSessionConfigResponse() : GetSessionConfigResponse(nullptr) {}
  ~GetSessionConfigResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetSessionConfigResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetSessionConfigResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetSessionConfigResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetSessionConfigResponse(const GetSessionConfigResponse& from) : GetSessionConfigResponse(nullptr, from) {}
  inline GetSessionConfigResponse(GetSessionConfigResponse&& from) noexcept
      : GetSessionConfigResponse(nullptr, std::move(from)) {}
  inline GetSessionConfigResponse& operator=(const GetSessionConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSessionConfigResponse& operator=(GetSessionConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSessionConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSessionConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetSessionConfigResponse*>(
        &_GetSessionConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(GetSessionConfigResponse& a, GetSessionConfigResponse& b) { a.Swap(&b); }
  inline void Swap(GetSessionConfigResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSessionConfigResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSessionConfigResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetSessionConfigResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetSessionConfigResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetSessionConfigResponse& from) { GetSessionConfigResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetSessionConfigResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.GetSessionConfigResponse"; }

 protected:
  explicit GetSessionConfigResponse(::google::protobuf::Arena* arena);
  GetSessionConfigResponse(::google::protobuf::Arena* arena, const GetSessionConfigResponse& from);
  GetSessionConfigResponse(::google::protobuf::Arena* arena, GetSessionConfigResponse&& from) noexcept
      : GetSessionConfigResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserNameFieldNumber = 2,
    kCharacterNameFieldNumber = 3,
    kSystemConfigFieldNumber = 4,
    kModelFieldNumber = 1,
    kTopKFieldNumber = 7,
    kTemperatureFieldNumber = 5,
    kTopPFieldNumber = 6,
    kCreatedTimeFieldNumber = 9,
    kMaxLengthFieldNumber = 8,
  };
  // string user_name = 2;
  void clear_user_name() ;
  const std::string& user_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* value);

  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
      const std::string& value);
  std::string* _internal_mutable_user_name();

  public:
  // string character_name = 3;
  void clear_character_name() ;
  const std::string& character_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character_name(Arg_&& arg, Args_... args);
  std::string* mutable_character_name();
  PROTOBUF_NODISCARD std::string* release_character_name();
  void set_allocated_character_name(std::string* value);

  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(
      const std::string& value);
  std::string* _internal_mutable_character_name();

  public:
  // string system_config = 4;
  void clear_system_config() ;
  const std::string& system_config() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_system_config(Arg_&& arg, Args_... args);
  std::string* mutable_system_config();
  PROTOBUF_NODISCARD std::string* release_system_config();
  void set_allocated_system_config(std::string* value);

  private:
  const std::string& _internal_system_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_config(
      const std::string& value);
  std::string* _internal_mutable_system_config();

  public:
  // .roleplay_bot.ai.Model model = 1;
  void clear_model() ;
  ::roleplay_bot::ai::Model model() const;
  void set_model(::roleplay_bot::ai::Model value);

  private:
  ::roleplay_bot::ai::Model _internal_model() const;
  void _internal_set_model(::roleplay_bot::ai::Model value);

  public:
  // uint32 top_k = 7;
  void clear_top_k() ;
  ::uint32_t top_k() const;
  void set_top_k(::uint32_t value);

  private:
  ::uint32_t _internal_top_k() const;
  void _internal_set_top_k(::uint32_t value);

  public:
  // double temperature = 5;
  void clear_temperature() ;
  double temperature() const;
  void set_temperature(double value);

  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);

  public:
  // double top_p = 6;
  void clear_top_p() ;
  double top_p() const;
  void set_top_p(double value);

  private:
  double _internal_top_p() const;
  void _internal_set_top_p(double value);

  public:
  // uint64 created_time = 9;
  void clear_created_time() ;
  ::uint64_t created_time() const;
  void set_created_time(::uint64_t value);

  private:
  ::uint64_t _internal_created_time() const;
  void _internal_set_created_time(::uint64_t value);

  public:
  // uint32 max_length = 8;
  void clear_max_length() ;
  ::uint32_t max_length() const;
  void set_max_length(::uint32_t value);

  private:
  ::uint32_t _internal_max_length() const;
  void _internal_set_max_length(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.GetSessionConfigResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      93, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetSessionConfigResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_name_;
    ::google::protobuf::internal::ArenaStringPtr character_name_;
    ::google::protobuf::internal::ArenaStringPtr system_config_;
    int model_;
    ::uint32_t top_k_;
    double temperature_;
    double top_p_;
    ::uint64_t created_time_;
    ::uint32_t max_length_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class GetSessionConfigRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.GetSessionConfigRequest) */ {
 public:
  inline GetSessionConfigRequest() : GetSessionConfigRequest(nullptr) {}
  ~GetSessionConfigRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetSessionConfigRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetSessionConfigRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetSessionConfigRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetSessionConfigRequest(const GetSessionConfigRequest& from) : GetSessionConfigRequest(nullptr, from) {}
  inline GetSessionConfigRequest(GetSessionConfigRequest&& from) noexcept
      : GetSessionConfigRequest(nullptr, std::move(from)) {}
  inline GetSessionConfigRequest& operator=(const GetSessionConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSessionConfigRequest& operator=(GetSessionConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSessionConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSessionConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetSessionConfigRequest*>(
        &_GetSessionConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(GetSessionConfigRequest& a, GetSessionConfigRequest& b) { a.Swap(&b); }
  inline void Swap(GetSessionConfigRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSessionConfigRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSessionConfigRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetSessionConfigRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetSessionConfigRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetSessionConfigRequest& from) { GetSessionConfigRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetSessionConfigRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.GetSessionConfigRequest"; }

 protected:
  explicit GetSessionConfigRequest(::google::protobuf::Arena* arena);
  GetSessionConfigRequest(::google::protobuf::Arena* arena, const GetSessionConfigRequest& from);
  GetSessionConfigRequest(::google::protobuf::Arena* arena, GetSessionConfigRequest&& from) noexcept
      : GetSessionConfigRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.GetSessionConfigRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetSessionConfigRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class DeleteSessionResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.DeleteSessionResponse) */ {
 public:
  inline DeleteSessionResponse() : DeleteSessionResponse(nullptr) {}
  ~DeleteSessionResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DeleteSessionResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DeleteSessionResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteSessionResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteSessionResponse(const DeleteSessionResponse& from) : DeleteSessionResponse(nullptr, from) {}
  inline DeleteSessionResponse(DeleteSessionResponse&& from) noexcept
      : DeleteSessionResponse(nullptr, std::move(from)) {}
  inline DeleteSessionResponse& operator=(const DeleteSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSessionResponse& operator=(DeleteSessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSessionResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSessionResponse*>(
        &_DeleteSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(DeleteSessionResponse& a, DeleteSessionResponse& b) { a.Swap(&b); }
  inline void Swap(DeleteSessionResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSessionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSessionResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DeleteSessionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteSessionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteSessionResponse& from) { DeleteSessionResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DeleteSessionResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.DeleteSessionResponse"; }

 protected:
  explicit DeleteSessionResponse(::google::protobuf::Arena* arena);
  DeleteSessionResponse(::google::protobuf::Arena* arena, const DeleteSessionResponse& from);
  DeleteSessionResponse(::google::protobuf::Arena* arena, DeleteSessionResponse&& from) noexcept
      : DeleteSessionResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusMessageFieldNumber = 1,
  };
  // string status_message = 1;
  void clear_status_message() ;
  const std::string& status_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_message(Arg_&& arg, Args_... args);
  std::string* mutable_status_message();
  PROTOBUF_NODISCARD std::string* release_status_message();
  void set_allocated_status_message(std::string* value);

  private:
  const std::string& _internal_status_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_message(
      const std::string& value);
  std::string* _internal_mutable_status_message();

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.DeleteSessionResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeleteSessionResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr status_message_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class DeleteSessionRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.DeleteSessionRequest) */ {
 public:
  inline DeleteSessionRequest() : DeleteSessionRequest(nullptr) {}
  ~DeleteSessionRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DeleteSessionRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DeleteSessionRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteSessionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteSessionRequest(const DeleteSessionRequest& from) : DeleteSessionRequest(nullptr, from) {}
  inline DeleteSessionRequest(DeleteSessionRequest&& from) noexcept
      : DeleteSessionRequest(nullptr, std::move(from)) {}
  inline DeleteSessionRequest& operator=(const DeleteSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSessionRequest& operator=(DeleteSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSessionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSessionRequest*>(
        &_DeleteSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(DeleteSessionRequest& a, DeleteSessionRequest& b) { a.Swap(&b); }
  inline void Swap(DeleteSessionRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSessionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSessionRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DeleteSessionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteSessionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteSessionRequest& from) { DeleteSessionRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DeleteSessionRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.DeleteSessionRequest"; }

 protected:
  explicit DeleteSessionRequest(::google::protobuf::Arena* arena);
  DeleteSessionRequest(::google::protobuf::Arena* arena, const DeleteSessionRequest& from);
  DeleteSessionRequest(::google::protobuf::Arena* arena, DeleteSessionRequest&& from) noexcept
      : DeleteSessionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.DeleteSessionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeleteSessionRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};
// -------------------------------------------------------------------

class GetStoryHistoryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:roleplay_bot.ai.GetStoryHistoryResponse) */ {
 public:
  inline GetStoryHistoryResponse() : GetStoryHistoryResponse(nullptr) {}
  ~GetStoryHistoryResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetStoryHistoryResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetStoryHistoryResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetStoryHistoryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetStoryHistoryResponse(const GetStoryHistoryResponse& from) : GetStoryHistoryResponse(nullptr, from) {}
  inline GetStoryHistoryResponse(GetStoryHistoryResponse&& from) noexcept
      : GetStoryHistoryResponse(nullptr, std::move(from)) {}
  inline GetStoryHistoryResponse& operator=(const GetStoryHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStoryHistoryResponse& operator=(GetStoryHistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStoryHistoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStoryHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const GetStoryHistoryResponse*>(
        &_GetStoryHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GetStoryHistoryResponse& a, GetStoryHistoryResponse& b) { a.Swap(&b); }
  inline void Swap(GetStoryHistoryResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStoryHistoryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStoryHistoryResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetStoryHistoryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetStoryHistoryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetStoryHistoryResponse& from) { GetStoryHistoryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetStoryHistoryResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "roleplay_bot.ai.GetStoryHistoryResponse"; }

 protected:
  explicit GetStoryHistoryResponse(::google::protobuf::Arena* arena);
  GetStoryHistoryResponse(::google::protobuf::Arena* arena, const GetStoryHistoryResponse& from);
  GetStoryHistoryResponse(::google::protobuf::Arena* arena, GetStoryHistoryResponse&& from) noexcept
      : GetStoryHistoryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStoryFieldNumber = 2,
    kSystemConfigFieldNumber = 1,
  };
  // repeated .roleplay_bot.ai.StoryDetails story = 2;
  int story_size() const;
  private:
  int _internal_story_size() const;

  public:
  void clear_story() ;
  ::roleplay_bot::ai::StoryDetails* mutable_story(int index);
  ::google::protobuf::RepeatedPtrField<::roleplay_bot::ai::StoryDetails>* mutable_story();

  private:
  const ::google::protobuf::RepeatedPtrField<::roleplay_bot::ai::StoryDetails>& _internal_story() const;
  ::google::protobuf::RepeatedPtrField<::roleplay_bot::ai::StoryDetails>* _internal_mutable_story();
  public:
  const ::roleplay_bot::ai::StoryDetails& story(int index) const;
  ::roleplay_bot::ai::StoryDetails* add_story();
  const ::google::protobuf::RepeatedPtrField<::roleplay_bot::ai::StoryDetails>& story() const;
  // string system_config = 1;
  void clear_system_config() ;
  const std::string& system_config() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_system_config(Arg_&& arg, Args_... args);
  std::string* mutable_system_config();
  PROTOBUF_NODISCARD std::string* release_system_config();
  void set_allocated_system_config(std::string* value);

  private:
  const std::string& _internal_system_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_config(
      const std::string& value);
  std::string* _internal_mutable_system_config();

  public:
  // @@protoc_insertion_point(class_scope:roleplay_bot.ai.GetStoryHistoryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetStoryHistoryResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::roleplay_bot::ai::StoryDetails > story_;
    ::google::protobuf::internal::ArenaStringPtr system_config_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_story_5fwriter_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InitializeSessionRequest

// .roleplay_bot.ai.Model model = 1;
inline void InitializeSessionRequest::clear_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_ = 0;
}
inline ::roleplay_bot::ai::Model InitializeSessionRequest::model() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.InitializeSessionRequest.model)
  return _internal_model();
}
inline void InitializeSessionRequest::set_model(::roleplay_bot::ai::Model value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.InitializeSessionRequest.model)
}
inline ::roleplay_bot::ai::Model InitializeSessionRequest::_internal_model() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::roleplay_bot::ai::Model>(_impl_.model_);
}
inline void InitializeSessionRequest::_internal_set_model(::roleplay_bot::ai::Model value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_ = value;
}

// string user_name = 2;
inline void InitializeSessionRequest::clear_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& InitializeSessionRequest::user_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.InitializeSessionRequest.user_name)
  return _internal_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeSessionRequest::set_user_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.InitializeSessionRequest.user_name)
}
inline std::string* InitializeSessionRequest::mutable_user_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.InitializeSessionRequest.user_name)
  return _s;
}
inline const std::string& InitializeSessionRequest::_internal_user_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_name_.Get();
}
inline void InitializeSessionRequest::_internal_set_user_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.Set(value, GetArena());
}
inline std::string* InitializeSessionRequest::_internal_mutable_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_name_.Mutable( GetArena());
}
inline std::string* InitializeSessionRequest::release_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.InitializeSessionRequest.user_name)
  return _impl_.user_name_.Release();
}
inline void InitializeSessionRequest::set_allocated_user_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.InitializeSessionRequest.user_name)
}

// string character_name = 3;
inline void InitializeSessionRequest::clear_character_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.character_name_.ClearToEmpty();
}
inline const std::string& InitializeSessionRequest::character_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.InitializeSessionRequest.character_name)
  return _internal_character_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeSessionRequest::set_character_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.character_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.InitializeSessionRequest.character_name)
}
inline std::string* InitializeSessionRequest::mutable_character_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.InitializeSessionRequest.character_name)
  return _s;
}
inline const std::string& InitializeSessionRequest::_internal_character_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.character_name_.Get();
}
inline void InitializeSessionRequest::_internal_set_character_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.character_name_.Set(value, GetArena());
}
inline std::string* InitializeSessionRequest::_internal_mutable_character_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.character_name_.Mutable( GetArena());
}
inline std::string* InitializeSessionRequest::release_character_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.InitializeSessionRequest.character_name)
  return _impl_.character_name_.Release();
}
inline void InitializeSessionRequest::set_allocated_character_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.character_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.character_name_.IsDefault()) {
    _impl_.character_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.InitializeSessionRequest.character_name)
}

// string system_config = 4;
inline void InitializeSessionRequest::clear_system_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.ClearToEmpty();
}
inline const std::string& InitializeSessionRequest::system_config() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.InitializeSessionRequest.system_config)
  return _internal_system_config();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeSessionRequest::set_system_config(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.InitializeSessionRequest.system_config)
}
inline std::string* InitializeSessionRequest::mutable_system_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_system_config();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.InitializeSessionRequest.system_config)
  return _s;
}
inline const std::string& InitializeSessionRequest::_internal_system_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.system_config_.Get();
}
inline void InitializeSessionRequest::_internal_set_system_config(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.Set(value, GetArena());
}
inline std::string* InitializeSessionRequest::_internal_mutable_system_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.system_config_.Mutable( GetArena());
}
inline std::string* InitializeSessionRequest::release_system_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.InitializeSessionRequest.system_config)
  return _impl_.system_config_.Release();
}
inline void InitializeSessionRequest::set_allocated_system_config(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.system_config_.IsDefault()) {
    _impl_.system_config_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.InitializeSessionRequest.system_config)
}

// double temperature = 5;
inline void InitializeSessionRequest::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline double InitializeSessionRequest::temperature() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.InitializeSessionRequest.temperature)
  return _internal_temperature();
}
inline void InitializeSessionRequest::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.InitializeSessionRequest.temperature)
}
inline double InitializeSessionRequest::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void InitializeSessionRequest::_internal_set_temperature(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// double top_p = 6;
inline void InitializeSessionRequest::clear_top_p() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.top_p_ = 0;
}
inline double InitializeSessionRequest::top_p() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.InitializeSessionRequest.top_p)
  return _internal_top_p();
}
inline void InitializeSessionRequest::set_top_p(double value) {
  _internal_set_top_p(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.InitializeSessionRequest.top_p)
}
inline double InitializeSessionRequest::_internal_top_p() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.top_p_;
}
inline void InitializeSessionRequest::_internal_set_top_p(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.top_p_ = value;
}

// uint32 top_k = 7;
inline void InitializeSessionRequest::clear_top_k() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.top_k_ = 0u;
}
inline ::uint32_t InitializeSessionRequest::top_k() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.InitializeSessionRequest.top_k)
  return _internal_top_k();
}
inline void InitializeSessionRequest::set_top_k(::uint32_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.InitializeSessionRequest.top_k)
}
inline ::uint32_t InitializeSessionRequest::_internal_top_k() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.top_k_;
}
inline void InitializeSessionRequest::_internal_set_top_k(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.top_k_ = value;
}

// uint32 max_length = 8;
inline void InitializeSessionRequest::clear_max_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_length_ = 0u;
}
inline ::uint32_t InitializeSessionRequest::max_length() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.InitializeSessionRequest.max_length)
  return _internal_max_length();
}
inline void InitializeSessionRequest::set_max_length(::uint32_t value) {
  _internal_set_max_length(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.InitializeSessionRequest.max_length)
}
inline ::uint32_t InitializeSessionRequest::_internal_max_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_length_;
}
inline void InitializeSessionRequest::_internal_set_max_length(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_length_ = value;
}

// -------------------------------------------------------------------

// InitializeSessionResponse

// string session_id = 1;
inline void InitializeSessionResponse::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& InitializeSessionResponse::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.InitializeSessionResponse.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitializeSessionResponse::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.InitializeSessionResponse.session_id)
}
inline std::string* InitializeSessionResponse::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.InitializeSessionResponse.session_id)
  return _s;
}
inline const std::string& InitializeSessionResponse::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void InitializeSessionResponse::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* InitializeSessionResponse::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* InitializeSessionResponse::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.InitializeSessionResponse.session_id)
  return _impl_.session_id_.Release();
}
inline void InitializeSessionResponse::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.InitializeSessionResponse.session_id)
}

// -------------------------------------------------------------------

// WriteStoryRequest

// string session_id = 1;
inline void WriteStoryRequest::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& WriteStoryRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.WriteStoryRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WriteStoryRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.WriteStoryRequest.session_id)
}
inline std::string* WriteStoryRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.WriteStoryRequest.session_id)
  return _s;
}
inline const std::string& WriteStoryRequest::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void WriteStoryRequest::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* WriteStoryRequest::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* WriteStoryRequest::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.WriteStoryRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void WriteStoryRequest::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.WriteStoryRequest.session_id)
}

// string prompt = 2;
inline void WriteStoryRequest::clear_prompt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_.ClearToEmpty();
}
inline const std::string& WriteStoryRequest::prompt() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.WriteStoryRequest.prompt)
  return _internal_prompt();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WriteStoryRequest::set_prompt(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.WriteStoryRequest.prompt)
}
inline std::string* WriteStoryRequest::mutable_prompt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.WriteStoryRequest.prompt)
  return _s;
}
inline const std::string& WriteStoryRequest::_internal_prompt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prompt_.Get();
}
inline void WriteStoryRequest::_internal_set_prompt(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_.Set(value, GetArena());
}
inline std::string* WriteStoryRequest::_internal_mutable_prompt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.prompt_.Mutable( GetArena());
}
inline std::string* WriteStoryRequest::release_prompt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.WriteStoryRequest.prompt)
  return _impl_.prompt_.Release();
}
inline void WriteStoryRequest::set_allocated_prompt(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.prompt_.IsDefault()) {
    _impl_.prompt_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.WriteStoryRequest.prompt)
}

// -------------------------------------------------------------------

// WriteStoryResponse

// string story = 1;
inline void WriteStoryResponse::clear_story() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.story_.ClearToEmpty();
}
inline const std::string& WriteStoryResponse::story() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.WriteStoryResponse.story)
  return _internal_story();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WriteStoryResponse::set_story(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.story_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.WriteStoryResponse.story)
}
inline std::string* WriteStoryResponse::mutable_story() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_story();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.WriteStoryResponse.story)
  return _s;
}
inline const std::string& WriteStoryResponse::_internal_story() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.story_.Get();
}
inline void WriteStoryResponse::_internal_set_story(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.story_.Set(value, GetArena());
}
inline std::string* WriteStoryResponse::_internal_mutable_story() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.story_.Mutable( GetArena());
}
inline std::string* WriteStoryResponse::release_story() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.WriteStoryResponse.story)
  return _impl_.story_.Release();
}
inline void WriteStoryResponse::set_allocated_story(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.story_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.story_.IsDefault()) {
    _impl_.story_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.WriteStoryResponse.story)
}

// -------------------------------------------------------------------

// GetStoryHistoryRequest

// string session_id = 1;
inline void GetStoryHistoryRequest::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& GetStoryHistoryRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetStoryHistoryRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetStoryHistoryRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetStoryHistoryRequest.session_id)
}
inline std::string* GetStoryHistoryRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.GetStoryHistoryRequest.session_id)
  return _s;
}
inline const std::string& GetStoryHistoryRequest::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void GetStoryHistoryRequest::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* GetStoryHistoryRequest::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* GetStoryHistoryRequest::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.GetStoryHistoryRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void GetStoryHistoryRequest::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.GetStoryHistoryRequest.session_id)
}

// -------------------------------------------------------------------

// StoryDetails

// string prompt = 1;
inline void StoryDetails::clear_prompt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_.ClearToEmpty();
}
inline const std::string& StoryDetails::prompt() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.StoryDetails.prompt)
  return _internal_prompt();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoryDetails::set_prompt(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.StoryDetails.prompt)
}
inline std::string* StoryDetails::mutable_prompt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.StoryDetails.prompt)
  return _s;
}
inline const std::string& StoryDetails::_internal_prompt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prompt_.Get();
}
inline void StoryDetails::_internal_set_prompt(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_.Set(value, GetArena());
}
inline std::string* StoryDetails::_internal_mutable_prompt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.prompt_.Mutable( GetArena());
}
inline std::string* StoryDetails::release_prompt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.StoryDetails.prompt)
  return _impl_.prompt_.Release();
}
inline void StoryDetails::set_allocated_prompt(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prompt_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.prompt_.IsDefault()) {
    _impl_.prompt_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.StoryDetails.prompt)
}

// string story = 2;
inline void StoryDetails::clear_story() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.story_.ClearToEmpty();
}
inline const std::string& StoryDetails::story() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.StoryDetails.story)
  return _internal_story();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoryDetails::set_story(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.story_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.StoryDetails.story)
}
inline std::string* StoryDetails::mutable_story() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_story();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.StoryDetails.story)
  return _s;
}
inline const std::string& StoryDetails::_internal_story() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.story_.Get();
}
inline void StoryDetails::_internal_set_story(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.story_.Set(value, GetArena());
}
inline std::string* StoryDetails::_internal_mutable_story() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.story_.Mutable( GetArena());
}
inline std::string* StoryDetails::release_story() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.StoryDetails.story)
  return _impl_.story_.Release();
}
inline void StoryDetails::set_allocated_story(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.story_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.story_.IsDefault()) {
    _impl_.story_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.StoryDetails.story)
}

// uint64 created_time = 3;
inline void StoryDetails::clear_created_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_time_ = ::uint64_t{0u};
}
inline ::uint64_t StoryDetails::created_time() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.StoryDetails.created_time)
  return _internal_created_time();
}
inline void StoryDetails::set_created_time(::uint64_t value) {
  _internal_set_created_time(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.StoryDetails.created_time)
}
inline ::uint64_t StoryDetails::_internal_created_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_time_;
}
inline void StoryDetails::_internal_set_created_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_time_ = value;
}

// -------------------------------------------------------------------

// GetStoryHistoryResponse

// string system_config = 1;
inline void GetStoryHistoryResponse::clear_system_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.ClearToEmpty();
}
inline const std::string& GetStoryHistoryResponse::system_config() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetStoryHistoryResponse.system_config)
  return _internal_system_config();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetStoryHistoryResponse::set_system_config(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetStoryHistoryResponse.system_config)
}
inline std::string* GetStoryHistoryResponse::mutable_system_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_system_config();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.GetStoryHistoryResponse.system_config)
  return _s;
}
inline const std::string& GetStoryHistoryResponse::_internal_system_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.system_config_.Get();
}
inline void GetStoryHistoryResponse::_internal_set_system_config(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.Set(value, GetArena());
}
inline std::string* GetStoryHistoryResponse::_internal_mutable_system_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.system_config_.Mutable( GetArena());
}
inline std::string* GetStoryHistoryResponse::release_system_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.GetStoryHistoryResponse.system_config)
  return _impl_.system_config_.Release();
}
inline void GetStoryHistoryResponse::set_allocated_system_config(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.system_config_.IsDefault()) {
    _impl_.system_config_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.GetStoryHistoryResponse.system_config)
}

// repeated .roleplay_bot.ai.StoryDetails story = 2;
inline int GetStoryHistoryResponse::_internal_story_size() const {
  return _internal_story().size();
}
inline int GetStoryHistoryResponse::story_size() const {
  return _internal_story_size();
}
inline void GetStoryHistoryResponse::clear_story() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.story_.Clear();
}
inline ::roleplay_bot::ai::StoryDetails* GetStoryHistoryResponse::mutable_story(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.GetStoryHistoryResponse.story)
  return _internal_mutable_story()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::roleplay_bot::ai::StoryDetails>* GetStoryHistoryResponse::mutable_story()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:roleplay_bot.ai.GetStoryHistoryResponse.story)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_story();
}
inline const ::roleplay_bot::ai::StoryDetails& GetStoryHistoryResponse::story(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetStoryHistoryResponse.story)
  return _internal_story().Get(index);
}
inline ::roleplay_bot::ai::StoryDetails* GetStoryHistoryResponse::add_story() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::roleplay_bot::ai::StoryDetails* _add = _internal_mutable_story()->Add();
  // @@protoc_insertion_point(field_add:roleplay_bot.ai.GetStoryHistoryResponse.story)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::roleplay_bot::ai::StoryDetails>& GetStoryHistoryResponse::story() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:roleplay_bot.ai.GetStoryHistoryResponse.story)
  return _internal_story();
}
inline const ::google::protobuf::RepeatedPtrField<::roleplay_bot::ai::StoryDetails>&
GetStoryHistoryResponse::_internal_story() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.story_;
}
inline ::google::protobuf::RepeatedPtrField<::roleplay_bot::ai::StoryDetails>*
GetStoryHistoryResponse::_internal_mutable_story() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.story_;
}

// -------------------------------------------------------------------

// GetSessionConfigRequest

// string session_id = 1;
inline void GetSessionConfigRequest::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& GetSessionConfigRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetSessionConfigRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSessionConfigRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetSessionConfigRequest.session_id)
}
inline std::string* GetSessionConfigRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.GetSessionConfigRequest.session_id)
  return _s;
}
inline const std::string& GetSessionConfigRequest::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void GetSessionConfigRequest::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* GetSessionConfigRequest::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* GetSessionConfigRequest::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.GetSessionConfigRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void GetSessionConfigRequest::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.GetSessionConfigRequest.session_id)
}

// -------------------------------------------------------------------

// GetSessionConfigResponse

// .roleplay_bot.ai.Model model = 1;
inline void GetSessionConfigResponse::clear_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_ = 0;
}
inline ::roleplay_bot::ai::Model GetSessionConfigResponse::model() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetSessionConfigResponse.model)
  return _internal_model();
}
inline void GetSessionConfigResponse::set_model(::roleplay_bot::ai::Model value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetSessionConfigResponse.model)
}
inline ::roleplay_bot::ai::Model GetSessionConfigResponse::_internal_model() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::roleplay_bot::ai::Model>(_impl_.model_);
}
inline void GetSessionConfigResponse::_internal_set_model(::roleplay_bot::ai::Model value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_ = value;
}

// string user_name = 2;
inline void GetSessionConfigResponse::clear_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& GetSessionConfigResponse::user_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetSessionConfigResponse.user_name)
  return _internal_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSessionConfigResponse::set_user_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetSessionConfigResponse.user_name)
}
inline std::string* GetSessionConfigResponse::mutable_user_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.GetSessionConfigResponse.user_name)
  return _s;
}
inline const std::string& GetSessionConfigResponse::_internal_user_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_name_.Get();
}
inline void GetSessionConfigResponse::_internal_set_user_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.Set(value, GetArena());
}
inline std::string* GetSessionConfigResponse::_internal_mutable_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_name_.Mutable( GetArena());
}
inline std::string* GetSessionConfigResponse::release_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.GetSessionConfigResponse.user_name)
  return _impl_.user_name_.Release();
}
inline void GetSessionConfigResponse::set_allocated_user_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.GetSessionConfigResponse.user_name)
}

// string character_name = 3;
inline void GetSessionConfigResponse::clear_character_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.character_name_.ClearToEmpty();
}
inline const std::string& GetSessionConfigResponse::character_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetSessionConfigResponse.character_name)
  return _internal_character_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSessionConfigResponse::set_character_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.character_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetSessionConfigResponse.character_name)
}
inline std::string* GetSessionConfigResponse::mutable_character_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.GetSessionConfigResponse.character_name)
  return _s;
}
inline const std::string& GetSessionConfigResponse::_internal_character_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.character_name_.Get();
}
inline void GetSessionConfigResponse::_internal_set_character_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.character_name_.Set(value, GetArena());
}
inline std::string* GetSessionConfigResponse::_internal_mutable_character_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.character_name_.Mutable( GetArena());
}
inline std::string* GetSessionConfigResponse::release_character_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.GetSessionConfigResponse.character_name)
  return _impl_.character_name_.Release();
}
inline void GetSessionConfigResponse::set_allocated_character_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.character_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.character_name_.IsDefault()) {
    _impl_.character_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.GetSessionConfigResponse.character_name)
}

// string system_config = 4;
inline void GetSessionConfigResponse::clear_system_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.ClearToEmpty();
}
inline const std::string& GetSessionConfigResponse::system_config() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetSessionConfigResponse.system_config)
  return _internal_system_config();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSessionConfigResponse::set_system_config(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetSessionConfigResponse.system_config)
}
inline std::string* GetSessionConfigResponse::mutable_system_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_system_config();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.GetSessionConfigResponse.system_config)
  return _s;
}
inline const std::string& GetSessionConfigResponse::_internal_system_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.system_config_.Get();
}
inline void GetSessionConfigResponse::_internal_set_system_config(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.Set(value, GetArena());
}
inline std::string* GetSessionConfigResponse::_internal_mutable_system_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.system_config_.Mutable( GetArena());
}
inline std::string* GetSessionConfigResponse::release_system_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.GetSessionConfigResponse.system_config)
  return _impl_.system_config_.Release();
}
inline void GetSessionConfigResponse::set_allocated_system_config(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_config_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.system_config_.IsDefault()) {
    _impl_.system_config_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.GetSessionConfigResponse.system_config)
}

// double temperature = 5;
inline void GetSessionConfigResponse::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline double GetSessionConfigResponse::temperature() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetSessionConfigResponse.temperature)
  return _internal_temperature();
}
inline void GetSessionConfigResponse::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetSessionConfigResponse.temperature)
}
inline double GetSessionConfigResponse::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void GetSessionConfigResponse::_internal_set_temperature(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// double top_p = 6;
inline void GetSessionConfigResponse::clear_top_p() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.top_p_ = 0;
}
inline double GetSessionConfigResponse::top_p() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetSessionConfigResponse.top_p)
  return _internal_top_p();
}
inline void GetSessionConfigResponse::set_top_p(double value) {
  _internal_set_top_p(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetSessionConfigResponse.top_p)
}
inline double GetSessionConfigResponse::_internal_top_p() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.top_p_;
}
inline void GetSessionConfigResponse::_internal_set_top_p(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.top_p_ = value;
}

// uint32 top_k = 7;
inline void GetSessionConfigResponse::clear_top_k() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.top_k_ = 0u;
}
inline ::uint32_t GetSessionConfigResponse::top_k() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetSessionConfigResponse.top_k)
  return _internal_top_k();
}
inline void GetSessionConfigResponse::set_top_k(::uint32_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetSessionConfigResponse.top_k)
}
inline ::uint32_t GetSessionConfigResponse::_internal_top_k() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.top_k_;
}
inline void GetSessionConfigResponse::_internal_set_top_k(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.top_k_ = value;
}

// uint32 max_length = 8;
inline void GetSessionConfigResponse::clear_max_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_length_ = 0u;
}
inline ::uint32_t GetSessionConfigResponse::max_length() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetSessionConfigResponse.max_length)
  return _internal_max_length();
}
inline void GetSessionConfigResponse::set_max_length(::uint32_t value) {
  _internal_set_max_length(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetSessionConfigResponse.max_length)
}
inline ::uint32_t GetSessionConfigResponse::_internal_max_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_length_;
}
inline void GetSessionConfigResponse::_internal_set_max_length(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_length_ = value;
}

// uint64 created_time = 9;
inline void GetSessionConfigResponse::clear_created_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_time_ = ::uint64_t{0u};
}
inline ::uint64_t GetSessionConfigResponse::created_time() const {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.GetSessionConfigResponse.created_time)
  return _internal_created_time();
}
inline void GetSessionConfigResponse::set_created_time(::uint64_t value) {
  _internal_set_created_time(value);
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.GetSessionConfigResponse.created_time)
}
inline ::uint64_t GetSessionConfigResponse::_internal_created_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_time_;
}
inline void GetSessionConfigResponse::_internal_set_created_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_time_ = value;
}

// -------------------------------------------------------------------

// DeleteSessionRequest

// string session_id = 1;
inline void DeleteSessionRequest::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& DeleteSessionRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.DeleteSessionRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteSessionRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.DeleteSessionRequest.session_id)
}
inline std::string* DeleteSessionRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.DeleteSessionRequest.session_id)
  return _s;
}
inline const std::string& DeleteSessionRequest::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_.Get();
}
inline void DeleteSessionRequest::_internal_set_session_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* DeleteSessionRequest::_internal_mutable_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* DeleteSessionRequest::release_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.DeleteSessionRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void DeleteSessionRequest::set_allocated_session_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_id_.IsDefault()) {
    _impl_.session_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.DeleteSessionRequest.session_id)
}

// -------------------------------------------------------------------

// DeleteSessionResponse

// string status_message = 1;
inline void DeleteSessionResponse::clear_status_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_message_.ClearToEmpty();
}
inline const std::string& DeleteSessionResponse::status_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:roleplay_bot.ai.DeleteSessionResponse.status_message)
  return _internal_status_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteSessionResponse::set_status_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:roleplay_bot.ai.DeleteSessionResponse.status_message)
}
inline std::string* DeleteSessionResponse::mutable_status_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status_message();
  // @@protoc_insertion_point(field_mutable:roleplay_bot.ai.DeleteSessionResponse.status_message)
  return _s;
}
inline const std::string& DeleteSessionResponse::_internal_status_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_message_.Get();
}
inline void DeleteSessionResponse::_internal_set_status_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_message_.Set(value, GetArena());
}
inline std::string* DeleteSessionResponse::_internal_mutable_status_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_message_.Mutable( GetArena());
}
inline std::string* DeleteSessionResponse::release_status_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:roleplay_bot.ai.DeleteSessionResponse.status_message)
  return _impl_.status_message_.Release();
}
inline void DeleteSessionResponse::set_allocated_status_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_message_.IsDefault()) {
    _impl_.status_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:roleplay_bot.ai.DeleteSessionResponse.status_message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ai
}  // namespace roleplay_bot


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::roleplay_bot::ai::Model> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::roleplay_bot::ai::Model>() {
  return ::roleplay_bot::ai::Model_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // story_5fwriter_2eproto_2epb_2eh
